# Every Python Library / Module Explained
---

## 📚 Standard Library

### Core Modules

**🔧 `os` - Operating System Interface**
```python
import os
# File and directory operations
os.getcwd()          # Get current directory
os.listdir('.')      # List directory contents
os.path.join('a', 'b')  # Cross-platform path joining
os.environ['PATH']   # Environment variables
```

**📁 `sys` - System-Specific Parameters**
```python
import sys
sys.argv            # Command line arguments
sys.path            # Python module search path
sys.version         # Python version info
sys.exit(0)         # Exit program
```

**📅 `datetime` - Date and Time Handling**
```python
from datetime import datetime, timedelta
now = datetime.now()
tomorrow = now + timedelta(days=1)
formatted = now.strftime('%Y-%m-%d %H:%M:%S')
```

**🔢 `math` - Mathematical Functions**
```python
import math
math.pi             # Pi constant
math.sqrt(16)       # Square root
math.sin(math.pi/2) # Trigonometric functions
math.factorial(5)   # Factorial
```

**🎲 `random` - Random Number Generation**
```python
import random
random.randint(1, 10)    # Random integer
random.choice(['a', 'b']) # Random choice
random.shuffle(list)     # Shuffle list
```

**📄 `json` - JSON Data Handling**
```python
import json
data = {'name': 'John', 'age': 30}
json_str = json.dumps(data)    # Convert to JSON string
parsed = json.loads(json_str)  # Parse JSON string
```

**🌐 `urllib` - URL Handling**
```python
from urllib.request import urlopen
from urllib.parse import urlparse
response = urlopen('https://example.com')
parsed_url = urlparse('https://example.com/path')
```

**📧 `email` - Email Processing**
```python
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
msg = MIMEMultipart()
msg['Subject'] = 'Test Email'
```

**🗜️ `zipfile` - ZIP Archive Handling**
```python
import zipfile
with zipfile.ZipFile('archive.zip', 'r') as zip_ref:
    zip_ref.extractall('extracted/')
```

**📊 `csv` - CSV File Processing**
```python
import csv
with open('data.csv', 'r') as file:
    reader = csv.reader(file)
    for row in reader:
        print(row)
```

---

## 📊 Data Science & Analytics

### Core Data Libraries

**🐼 `pandas` - Data Manipulation and Analysis**
```python
import pandas as pd
# Create DataFrame
df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
# Read CSV
df = pd.read_csv('data.csv')
# Data operations
df.head()           # First 5 rows
df.describe()       # Statistical summary
df.groupby('column').sum()  # Group operations
```

**🔢 `numpy` - Numerical Computing**
```python
import numpy as np
# Create arrays
arr = np.array([1, 2, 3, 4, 5])
matrix = np.array([[1, 2], [3, 4]])
# Operations
arr.mean()          # Mean
arr.std()           # Standard deviation
np.dot(matrix1, matrix2)  # Matrix multiplication
```

**📈 `matplotlib` - Plotting and Visualization**
```python
import matplotlib.pyplot as plt
plt.plot([1, 2, 3, 4], [1, 4, 2, 3])
plt.xlabel('X Label')
plt.ylabel('Y Label')
plt.title('My Plot')
plt.show()
```

**📊 `seaborn` - Statistical Data Visualization**
```python
import seaborn as sns
sns.set_style("whitegrid")
sns.scatterplot(x='x', y='y', data=df)
sns.heatmap(correlation_matrix, annot=True)
```

**📉 `plotly` - Interactive Plotting**
```python
import plotly.express as px
fig = px.scatter(df, x='x', y='y', color='category')
fig.show()
```

**📋 `scipy` - Scientific Computing**
```python
from scipy import stats
from scipy.optimize import minimize
# Statistical functions
stats.norm.cdf(0)   # Cumulative distribution
# Optimization
result = minimize(f, x0)
```

---

## 🌐 Web Development

### Web Frameworks

**🚀 `flask` - Lightweight Web Framework**
```python
from flask import Flask, render_template, request
app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/api/data', methods=['POST'])
def api_data():
    data = request.json
    return {'status': 'success'}
```

**⚡ `django` - Full-Featured Web Framework**
```python
# models.py
from django.db import models
class User(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()

# views.py
from django.shortcuts import render
def user_list(request):
    users = User.objects.all()
    return render(request, 'users.html', {'users': users})
```

**🔧 `fastapi` - Modern, Fast Web Framework**
```python
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float

@app.post("/items/")
async def create_item(item: Item):
    return {"item": item}
```

### HTTP and API Libraries

**📡 `requests` - HTTP Library**
```python
import requests
response = requests.get('https://api.example.com/data')
data = response.json()
response.status_code
```

**🔌 `aiohttp` - Asynchronous HTTP Client/Server**
```python
import aiohttp
import asyncio

async def fetch_data():
    async with aiohttp.ClientSession() as session:
        async with session.get('https://api.example.com') as response:
            return await response.json()
```

**🌐 `urllib3` - HTTP Client**
```python
import urllib3
http = urllib3.PoolManager()
response = http.request('GET', 'https://example.com')
```

---

## 🤖 Machine Learning & AI

### Core ML Libraries

**🧠 `scikit-learn` - Machine Learning Library**
```python
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict
predictions = model.predict(X_test)
```

**🔥 `tensorflow` - Deep Learning Framework**
```python
import tensorflow as tf
from tensorflow import keras

# Create model
model = keras.Sequential([
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])

# Compile and train
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy')
model.fit(x_train, y_train, epochs=10)
```

**⚡ `pytorch` - Deep Learning Framework**
```python
import torch
import torch.nn as nn

# Define model
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.fc1 = nn.Linear(784, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return x
```

**🎯 `xgboost` - Gradient Boosting**
```python
import xgboost as xgb
from xgboost import XGBClassifier

# Train model
model = XGBClassifier()
model.fit(X_train, y_train)

# Predict
predictions = model.predict(X_test)
```

**🔍 `opencv` - Computer Vision**
```python
import cv2
# Load image
img = cv2.imread('image.jpg')
# Convert to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
# Edge detection
edges = cv2.Canny(gray, 50, 150)
```

---

## 🗄️ Database & Storage

### Database Libraries

**🐘 `psycopg2` - PostgreSQL Adapter**
```python
import psycopg2
conn = psycopg2.connect(
    host="localhost",
    database="mydb",
    user="username",
    password="password"
)
cursor = conn.cursor()
cursor.execute("SELECT * FROM users")
```

**🐬 `pymysql` - MySQL Connector**
```python
import pymysql
conn = pymysql.connect(
    host='localhost',
    user='username',
    password='password',
    database='mydb'
)
```

**🍃 `pymongo` - MongoDB Driver**
```python
from pymongo import MongoClient
client = MongoClient('mongodb://localhost:27017/')
db = client['mydatabase']
collection = db['mycollection']
collection.insert_one({'name': 'John', 'age': 30})
```

**🗃️ `sqlite3` - SQLite Database**
```python
import sqlite3
conn = sqlite3.connect('database.db')
cursor = conn.cursor()
cursor.execute('CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT)')
```

**📦 `sqlalchemy` - SQL Toolkit and ORM**
```python
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String(50))
```

---

## 🖥️ GUI Development

### GUI Frameworks

**🎨 `tkinter` - Standard GUI Toolkit**
```python
import tkinter as tk
from tkinter import ttk

root = tk.Tk()
root.title("My App")

label = ttk.Label(root, text="Hello World")
label.pack()

button = ttk.Button(root, text="Click Me")
button.pack()

root.mainloop()
```

**🐍 `pyqt` - Qt for Python**
```python
from PyQt5.QtWidgets import QApplication, QWidget, QLabel
import sys

app = QApplication(sys.argv)
window = QWidget()
window.setWindowTitle('PyQt5 App')
window.show()
sys.exit(app.exec_())
```

**🎯 `kivy` - Cross-platform GUI Framework**
```python
from kivy.app import App
from kivy.uix.label import Label

class MyApp(App):
    def build(self):
        return Label(text='Hello Kivy')

MyApp().run()
```

---

## 🔧 System & Network

### System Libraries

**🌐 `socket` - Network Programming**
```python
import socket

# Server
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind(('localhost', 8080))
server.listen(5)

# Client
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('localhost', 8080))
```

**📁 `pathlib` - Object-Oriented Filesystem Paths**
```python
from pathlib import Path
path = Path('/home/user/documents')
path.exists()
path.is_file()
path.suffix
```

**⏰ `time` - Time-Related Functions**
```python
import time
time.sleep(1)           # Sleep for 1 second
time.time()             # Current timestamp
time.strftime('%Y-%m-%d')  # Format time
```

**🔄 `threading` - Threading Support**
```python
import threading
import time

def worker():
    print("Worker thread")
    time.sleep(1)

thread = threading.Thread(target=worker)
thread.start()
thread.join()
```

**⚡ `asyncio` - Asynchronous I/O**
```python
import asyncio

async def async_function():
    await asyncio.sleep(1)
    return "Done"

async def main():
    result = await async_function()
    print(result)

asyncio.run(main())
```

---

## 🧪 Testing & Development

### Testing Frameworks

**✅ `unittest` - Unit Testing Framework**
```python
import unittest

class TestMath(unittest.TestCase):
    def test_add(self):
        self.assertEqual(2 + 2, 4)
    
    def test_multiply(self):
        self.assertEqual(3 * 3, 9)

if __name__ == '__main__':
    unittest.main()
```

**🎯 `pytest` - Testing Framework**
```python
def test_add():
    assert 2 + 2 == 4

def test_multiply():
    assert 3 * 3 == 9
```

**🔍 `mock` - Mocking Library**
```python
from unittest.mock import Mock, patch

mock_obj = Mock()
mock_obj.method.return_value = 'mocked'

with patch('module.function') as mock_func:
    mock_func.return_value = 'patched'
```

**📊 `coverage` - Code Coverage**
```python
# Run with: coverage run -m pytest
# Generate report: coverage report
# HTML report: coverage html
```

---

## 🛠️ Utilities & Tools

### Utility Libraries

**📝 `logging` - Logging Facility**
```python
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.info('This is an info message')
logger.error('This is an error message')
```

**🔧 `argparse` - Command Line Interface**
```python
import argparse
parser = argparse.ArgumentParser(description='My script')
parser.add_argument('--input', help='Input file')
parser.add_argument('--output', help='Output file')
args = parser.parse_args()
```

**📦 `itertools` - Iterator Functions**
```python
import itertools
# Infinite iterators
count = itertools.count(10)
cycle = itertools.cycle(['A', 'B', 'C'])
repeat = itertools.repeat(10, 3)

# Combinatoric iterators
combinations = itertools.combinations([1, 2, 3], 2)
permutations = itertools.permutations([1, 2, 3])
```

**🔍 `re` - Regular Expressions**
```python
import re
pattern = r'\d+'
text = 'I have 123 apples'
matches = re.findall(pattern, text)
replaced = re.sub(pattern, 'X', text)
```

**📋 `collections` - Specialized Container Types**
```python
from collections import defaultdict, Counter, deque
# Default dictionary
dd = defaultdict(list)
dd['key'].append('value')

# Counter
counter = Counter(['a', 'b', 'a', 'c'])
print(counter.most_common(2))

# Deque
dq = deque([1, 2, 3])
dq.appendleft(0)
dq.append(4)
```

---

## 🔒 Security

### Security Libraries

**🔐 `cryptography` - Cryptographic Recipes**
```python
from cryptography.fernet import Fernet
key = Fernet.generate_key()
cipher = Fernet(key)
encrypted = cipher.encrypt(b"secret message")
decrypted = cipher.decrypt(encrypted)
```

**🔑 `hashlib` - Secure Hash Functions**
```python
import hashlib
text = "Hello World"
# MD5 (not recommended for security)
md5_hash = hashlib.md5(text.encode()).hexdigest()
# SHA-256
sha256_hash = hashlib.sha256(text.encode()).hexdigest()
```

**🛡️ `bcrypt` - Password Hashing**
```python
import bcrypt
password = b"my_password"
salt = bcrypt.gensalt()
hashed = bcrypt.hashpw(password, salt)
bcrypt.checkpw(password, hashed)
```

**🔍 `requests-oauthlib` - OAuth Authentication**
```python
from requests_oauthlib import OAuth1Session
oauth = OAuth1Session('consumer_key', 'consumer_secret')
```

---

## 🎮 Game Development

### Game Libraries

**🐍 `pygame` - Game Development Library**
```python
import pygame
pygame.init()
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("My Game")

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    pygame.display.flip()
```

**🎯 `arcade` - Modern Game Development**
```python
import arcade

class MyGame(arcade.Window):
    def __init__(self):
        super().__init__(800, 600, "My Game")
    
    def on_draw(self):
        arcade.start_render()

game = MyGame()
arcade.run()
```

---

## 🔬 Scientific Computing

### Scientific Libraries

**📊 `sympy` - Symbolic Mathematics**
```python
import sympy as sp
x = sp.Symbol('x')
expr = x**2 + 2*x + 1
derivative = sp.diff(expr, x)
integral = sp.integrate(expr, x)
```

**🧮 `numba` - JIT Compiler**
```python
from numba import jit
import numpy as np

@jit
def fast_function(x):
    return np.sum(x**2)

result = fast_function(np.array([1, 2, 3, 4]))
```

**🌊 `scipy` - Scientific Computing**
```python
from scipy import optimize, integrate, interpolate
# Optimization
result = optimize.minimize(f, x0)
# Integration
result = integrate.quad(f, 0, 1)
# Interpolation
f_interp = interpolate.interp1d(x, y)
```

---

## 📦 Package Management

### Package Managers

**📦 `pip` - Package Installer**
```bash
# Install package
pip install package_name

# Install from requirements
pip install -r requirements.txt

# Install in development mode
pip install -e .

# List installed packages
pip list

# Show package info
pip show package_name
```

**🐍 `conda` - Package and Environment Manager**
```bash
# Create environment
conda create -n myenv python=3.9

# Activate environment
conda activate myenv

# Install package
conda install package_name

# List environments
conda env list
```

**📋 `poetry` - Dependency Management**
```bash
# Initialize project
poetry init

# Install dependencies
poetry install

# Add dependency
poetry add package_name

# Run script
poetry run python script.py
```

---

## 🚀 Performance & Optimization

### Performance Libraries

**⚡ `cython` - C Extensions for Python**
```python
# cython_example.pyx
def fast_function(int n):
    cdef int i, result = 0
    for i in range(n):
        result += i
    return result
```

**🔥 `numba` - JIT Compilation**
```python
from numba import jit, cuda
import numpy as np

@jit(nopython=True)
def fast_sum(arr):
    return np.sum(arr)

# GPU computation
@cuda.jit
def gpu_function(arr):
    idx = cuda.grid(1)
    if idx < arr.size:
        arr[idx] *= 2
```

**📊 `memory_profiler` - Memory Usage Profiler**
```python
from memory_profiler import profile

@profile
def my_function():
    a = [1] * 1000000
    b = [2] * 1000000
    return a + b
```

---

## 🔧 Development Tools

### Development Utilities

**📝 `black` - Code Formatter**
```bash
# Format code
black my_script.py

# Check formatting
black --check my_script.py
```

**🔍 `flake8` - Linting Tool**
```bash
# Lint code
flake8 my_script.py

# With configuration
flake8 --max-line-length=88 my_script.py
```

**🔄 `autopep8` - PEP 8 Code Formatter**
```bash
# Format code
autopep8 --in-place my_script.py

# Aggressive formatting
autopep8 --in-place --aggressive my_script.py
```

**📊 `pylint` - Code Analysis**
```bash
# Analyze code
pylint my_script.py

# Generate report
pylint --output-format=html my_script.py > report.html
```

---

## 📚 Quick Reference

### Common Import Patterns
```python
# Standard library
import os, sys, json, datetime
from pathlib import Path
from typing import List, Dict, Optional

# Data science
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Web development
from flask import Flask, request, jsonify
import requests

# Machine learning
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import tensorflow as tf
```

### Virtual Environment Setup
```bash
# Create virtual environment
python -m venv myenv

# Activate (Windows)
myenv\Scripts\activate

# Activate (Linux/Mac)
source myenv/bin/activate

# Install requirements
pip install -r requirements.txt
```

### Common File Operations
```python
# Reading files
with open('file.txt', 'r') as f:
    content = f.read()

# Writing files
with open('output.txt', 'w') as f:
    f.write('Hello World')

# JSON files
import json
with open('data.json', 'r') as f:
    data = json.load(f)
```

---

*Last Updated: 2025*
*Remember: Always use virtual environments for Python projects and keep your dependencies up to date!*
